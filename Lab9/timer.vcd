$date
	Thu Oct 25 15:23:15 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module timer_test $end
$var wire 32 ! cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 1 # TimerAddress $end
$var reg 1 $ MemRead $end
$var reg 1 % MemWrite $end
$var reg 32 & address [31:0] $end
$var reg 1 ' clock $end
$var reg 32 ( data [31:0] $end
$var reg 1 ) reset $end
$scope module t $end
$var wire 1 $ MemRead $end
$var wire 1 % MemWrite $end
$var wire 1 # TimerAddress $end
$var wire 1 * acknowledge $end
$var wire 32 + address [31:0] $end
$var wire 1 ' clock $end
$var wire 32 , data [31:0] $end
$var wire 1 ) reset $end
$var wire 1 - timeRead $end
$var wire 1 . timeWrite $end
$var wire 32 / qInterrupt [31:0] $end
$var wire 32 0 qCycle [31:0] $end
$var wire 32 1 dCycle [31:0] $end
$var wire 32 2 cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$scope module alu1 $end
$var wire 3 3 control [2:0] $end
$var wire 32 4 inB [31:0] $end
$var wire 32 5 out [31:0] $end
$var wire 1 6 zero $end
$var wire 1 7 negative $end
$var wire 32 8 inA [31:0] $end
$upscope $end
$scope module cycle_counter $end
$var wire 1 ' clk $end
$var wire 32 9 d [31:0] $end
$var wire 1 : enable $end
$var wire 1 ) reset $end
$var reg 32 ; q [31:0] $end
$upscope $end
$scope module interrupt_cycle $end
$var wire 1 ' clk $end
$var wire 32 < d [31:0] $end
$var wire 1 . enable $end
$var wire 1 ) reset $end
$var reg 32 = q [31:0] $end
$upscope $end
$scope module interupt_line $end
$var wire 1 ' clk $end
$var wire 1 > d $end
$var wire 1 ? enable $end
$var wire 1 @ reset $end
$var reg 1 " q $end
$upscope $end
$scope module trid $end
$var wire 1 - control $end
$var wire 32 A d [31:0] $end
$var wire 32 B o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz B
bx A
1@
x?
1>
bx =
b0 <
bx ;
1:
bx 9
bx 8
x7
x6
bx 5
b1 4
b0 3
bz 2
bx 1
bx 0
bx /
0.
0-
b0 ,
b0 +
0*
1)
b0 (
0'
b0 &
0%
0$
0#
x"
bz !
$end
#5
07
06
b1 1
b1 5
b1 9
0?
b11111111111111111111111111111111 /
b11111111111111111111111111111111 =
b0 0
b0 8
b0 ;
b0 A
0"
1'
#10
b0 !
b0 2
b0 B
1-
1#
0@
0'
1$
b11111111111111110000000000011100 &
b11111111111111110000000000011100 +
0)
#15
b10 1
b10 5
b10 9
b1 !
b1 2
b1 B
b1 0
b1 8
b1 ;
b1 A
1'
#20
0'
#25
b11 1
b11 5
b11 9
b10 !
b10 2
b10 B
b10 0
b10 8
b10 ;
b10 A
1'
#30
0'
#35
b100 1
b100 5
b100 9
b11 !
b11 2
b11 B
b11 0
b11 8
b11 ;
b11 A
1'
#40
0'
#45
b101 1
b101 5
b101 9
b100 !
b100 2
b100 B
b100 0
b100 8
b100 ;
b100 A
1'
#50
bz !
bz 2
bz B
1.
0-
0'
1%
0$
b110 (
b110 ,
b110 <
#55
b110 1
b110 5
b110 9
b101 0
b101 8
b101 ;
b101 A
b110 /
b110 =
1'
#60
b101 !
b101 2
b101 B
0.
1-
0'
0%
1$
#65
b111 1
b111 5
b111 9
b110 !
b110 2
b110 B
1?
b110 0
b110 8
b110 ;
b110 A
1'
#70
0'
#75
b1000 1
b1000 5
b1000 9
b111 !
b111 2
b111 B
1"
0?
b111 0
b111 8
b111 ;
b111 A
1'
#80
0'
#85
b1001 1
b1001 5
b1001 9
b1000 !
b1000 2
b1000 B
b1000 0
b1000 8
b1000 ;
b1000 A
1'
#90
0'
#95
b1010 1
b1010 5
b1010 9
b1001 !
b1001 2
b1001 B
b1001 0
b1001 8
b1001 ;
b1001 A
1'
#100
bz !
bz 2
bz B
1@
0-
1*
0'
1%
0$
b11111111111111110000000001101100 &
b11111111111111110000000001101100 +
#105
b1011 1
b1011 5
b1011 9
b1010 0
b1010 8
b1010 ;
b1010 A
0"
1'
#110
0'
